{
	"info": {
		"_postman_id": "fce4f696-486e-47a6-9422-f34942197a3d",
		"name": "Producto-CategoriaProducto",
		"description": "Documentación para la asociación de Producto con Categoría de Producto",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22977088"
	},
	"item": [
		{
			"name": "Agregar una categoria de producto a un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set(\"producto_id\", \"322411d0-3016-496e-85a3-47a792e20700\");\r",
							"pm.globals.set(\"categoriaproducto_id\", \"b79e360f-b15d-4bb8-af59-21418f0cdda4\");\r",
							"\r",
							"pm.test(\"Codigo de estado es 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/productos/{{producto_id}}/categoriaproductos/{{categoriaproducto_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"productos",
						"{{producto_id}}",
						"categoriaproductos",
						"{{categoriaproducto_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agregar una categoria de producto que no existe a un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Codigo de estado es 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Obtener mensaje de error esperado\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"La categoria de producto con el ID dado no fue encontrada\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/productos/{{producto_id}}/categoriaproductos/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"productos",
						"{{producto_id}}",
						"categoriaproductos",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agregar una categoria de producto a un producto que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Codigo de estado es 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Obtener mensaje de error esperado\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"El producto con el ID dado no fue encontrado\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/productos/00000000-0000-0000-0000-000000000000/categoriaproductos/{{categoriaproducto_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"productos",
						"00000000-0000-0000-0000-000000000000",
						"categoriaproductos",
						"{{categoriaproducto_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener una categoria de producto de un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Codigo de estado es 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/productos/{{producto_id}}/categoriaproductos/{{categoriaproducto_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"productos",
						"{{producto_id}}",
						"categoriaproductos",
						"{{categoriaproducto_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener una categoria de producto que no existe de un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Codigo de estado es 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Obtener mensaje de respuesta esperado\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"La categoria de producto con el ID dado no fue encontrada\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/productos/{{producto_id}}/categoriaproductos/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"productos",
						"{{producto_id}}",
						"categoriaproductos",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener una categoria de producto de un producto que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Codigo de estado es 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Obtener mensaje de respuesta esperado\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"El producto con el ID dado no fue encontrado\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/productos/00000000-0000-0000-0000-000000000000/categoriaproductos/{{categoriaproducto_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"productos",
						"00000000-0000-0000-0000-000000000000",
						"categoriaproductos",
						"{{categoriaproducto_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener una categoria de producto no asociada al producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set(\"categoriaproducto_id_2\", \"8c166899-951e-4664-9df3-381eb06fe49c\");\r",
							"\r",
							"pm.test(\"Codigo de estado es 412\", function () {\r",
							"   pm.response.to.have.status(412);\r",
							"});\r",
							"\r",
							"pm.test(\"Obtener mensaje de respuesta esperado\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"La categoria de producto con el ID dado no esta asociada al producto\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/productos/{{producto_id}}/categoriaproductos/{{categoriaproducto_id_2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"productos",
						"{{producto_id}}",
						"categoriaproductos",
						"{{categoriaproducto_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener la categoria de producto del producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Codigo de estado es 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/productos/{{producto_id}}/categoriaproductos/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"productos",
						"{{producto_id}}",
						"categoriaproductos",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener la categoria de producto de un producto que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Codigo de estado es 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Obtener mensaje de respuesta esperado\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"El producto con el ID dado no fue encontrado\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/productos/00000000-0000-0000-0000-000000000000/categoriaproductos/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"productos",
						"00000000-0000-0000-0000-000000000000",
						"categoriaproductos",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar categoria de producto de un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Codigo de respuesta es 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"codigo\": \"b79e360f-b15d-4bb8-af59-21418f0cdda4\",\n    \"nombre\": \"Condimento\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/productos/{{producto_id}}/categoriaproductos/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"productos",
						"{{producto_id}}",
						"categoriaproductos",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar categoria de producto que no existe en un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"COdigo de estado es 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Obtener mensaje de respuesta esperado\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"La categoria de producto con el ID dado no fue encontrada\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"codigo\": \"00000000-0000-0000-0000-000000000000\",\n    \"nombre\": \"Condimento\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/productos/{{producto_id}}/categoriaproductos/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"productos",
						"{{producto_id}}",
						"categoriaproductos",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar categoria de producto de un producto Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Codigo de estado es 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Obtener mensaje de respuesta esperado\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"El producto con el ID dado no fue encontrado\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"codigo\": \"b79e360f-b15d-4bb8-af59-21418f0cdda4\",\n    \"nombre\": \"Condimento\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/productos/00000000-0000-0000-0000-000000000000/categoriaproductos/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"productos",
						"00000000-0000-0000-0000-000000000000",
						"categoriaproductos",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar una categoria de producto de un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Codigo de estado es 204\", function () {\r",
							"   pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/productos/{{producto_id}}/categoriaproductos/{{categoriaproducto_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"productos",
						"{{producto_id}}",
						"categoriaproductos",
						"{{categoriaproducto_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar una categoria de producto que no existe de un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Codigo de estado es 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Obtener mensaje de respuesta esperado\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"La categoria de producto con el ID dado no fue encontrada\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/productos/{{producto_id}}/categoriaproductos/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"productos",
						"{{producto_id}}",
						"categoriaproductos",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar una categoria de producto de un producto que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Codigo de estado es 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Obtener mensaje de respuesta esperado\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"El producto con el ID dado no fue encontrado\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/productos/00000000-0000-0000-0000-000000000000/categoriaproductos/{{categoriaproducto_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"productos",
						"00000000-0000-0000-0000-000000000000",
						"categoriaproductos",
						"{{categoriaproducto_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar una categoria de producto no asociada al producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set(\"producto_id\", \"8bec6e4c-ec11-482c-93fe-2cdb6c794714\");\r",
							"\r",
							"pm.globals.set(\"categoriaproducto_id_2\", \"dd221bf9-8324-4687-b989-ed3857fede74\");\r",
							"\r",
							"pm.test(\"Codigo de estado es 412\", function () {\r",
							"   pm.response.to.have.status(412);\r",
							"});\r",
							"\r",
							"pm.test(\"Obtener mensaje de respuesta esperado\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"La categoria de producto con el ID dado no esta asociada al producto\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/productos/{{producto_id}}/categoriaproductos/{{categoriaproducto_id_2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"productos",
						"{{producto_id}}",
						"categoriaproductos",
						"{{categoriaproducto_id_2}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api/v1",
			"type": "string"
		}
	]
}